@page "/login"
@inject NavigationManager Navigation;
@inject RefreshViewState RefreshViewState;

<form id="loginForm" @onsubmit="LoginM">
    <div class="loginContainer">
        <div class="login">
            <label for="name" class="loginLabel">Login</label><br>
            <input @bind="LoginName" type="text" placeholder="Login" name="name" required class="inputLogin" id="login"><br>
            <label for="password" class="loginLabel">Password</label><br>
            <input @bind="Password" type="password" placeholder="Password" name="password" required class="inputLogin" id="password"><br>
            <input type="submit" value="Login" id="submit" class="submitLogin" style="visibility: @SubmitVisibility"><br>
            <a id="registerLink" href="/register">Haven't account yet? Create new one</a>
            <div @onclick="Fogot" id="fogot" style="display: @FogotVisibility"> Fogot password?</div>
        </div>
        <div class="error" id="error">
            <div class="errorContent">
                <div id="errorText">
                </div>
            </div>
        </div>
    </div>
</form>

@code {
    private string LoginName;
    private string Password;
    public string SubmitVisibility = "visible";
    private string FogotVisibility = "none";
    HttpClient client = new HttpClient();
    static string appDataPath = FileSystem.Current.AppDataDirectory;
    static string userPath = Path.Combine(appDataPath, "User.json");
    static string notesPath = Path.Combine(appDataPath, "Notes.json");

    protected override Task OnInitializedAsync()
    {
        RefreshViewState.PropertyChanged += OnPropertyChanged;
        return base.OnInitializedAsync();
    }

    private void OnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(RefreshViewState.IsRefreshing) && RefreshViewState.IsRefreshing)
        {
            // RefreshPage();
            RefreshViewState.SetIsRefreshing(false);
        }
    }

    public static string NormalizeErrorValue(string errorText)
    {
        return errorText.Replace("\"", "").Replace("[", "").Replace("]", "");
    }

    public void LoginM()
    {
        Application.Current.MainPage.DisplayAlert("Wait", "Please wait...", "Ok");
        UserLoginRequest request = new UserLoginRequest()
        {
            Name = LoginName,
            Password = Password
        };
        SubmitVisibility = "hidden";
        if (Connectivity.NetworkAccess == NetworkAccess.None)
        {
            Application.Current.MainPage.DisplayAlert("No Internet", "No Internet Connection", "Ok");
        }
        else if (request.Name == null || request.Password == null)
        {
            Application.Current.MainPage.DisplayAlert("Error", "Name and Password cannot be null", "Ok");
        }
        else
        {
            var url = "https://nazar624.bsite.net/api/User/login";
            HttpRequestMessage message = new HttpRequestMessage(HttpMethod.Post, url);
            message.Content = JsonContent.Create<UserLoginRequest>(request);
            HttpResponseMessage response = client.SendAsync(message).Result;
            string body = response.Content.ReadAsStringAsync().Result;

            var options = new JsonSerializerOptions()
                {
                    PropertyNameCaseInsensitive = true
                };

            if (response.IsSuccessStatusCode)
            {
                var res = JsonSerializer.Deserialize<User>(body, options);
                res.Password = request.Password;
                var resJson = JsonSerializer.Serialize(res);
                if(res.ResetConfirmed == false)
                {
                    File.WriteAllText(userPath, resJson);
                    Application.Current.MainPage.DisplayAlert("Response", "Logined Successfully", "Ok");
                    Navigation.NavigateTo("/");    
                } else
                {
                    Application.Current.MainPage.DisplayAlert("Response", "Confirm Changes! Check Email!", "Ok");
                }
            }
            else
            {
                var res = JsonSerializer.Deserialize<ErrorModel>(body, options);
                var values = NormalizeErrorValue(res.value.ToString());
                //var values = res.value.ToString().Replace("\"", "").Replace("[","").Replace("]", "");
                Application.Current.MainPage.DisplayAlert("Error", values, "Ok");
                if (values == "Password incorrect")
                {
                    FogotVisibility = "block";
                }
            }
            SubmitVisibility = "visible";
        }
    }
    public void Fogot()
    {
        var name = LoginName;
        var url = "https://nazar624.bsite.net/api/User/forgot-password";
        HttpRequestMessage message = new HttpRequestMessage(HttpMethod.Post, url);
        message.Content = JsonContent.Create(name);
        HttpResponseMessage response = client.SendAsync(message).Result;
        string body = response.Content.ReadAsStringAsync().Result;

        var options = new JsonSerializerOptions()
            {
                PropertyNameCaseInsensitive = true
            };

        if (response.IsSuccessStatusCode)
        {
            var res = JsonSerializer.Deserialize<ErrorModel>(body, options);
            var resJson = JsonSerializer.Serialize(res);
            File.WriteAllText(Path.Combine(appDataPath, "reset.json"), resJson);
            Navigation.NavigateTo("/resetPassword");
            // hybrid.Navigate("html/resetPassword.html");
        }
        else
        {
            var res = JsonSerializer.Deserialize<ErrorModel>(body, options);
            var values = NormalizeErrorValue(res.value.ToString());
            //var values = res.value.ToString().Replace("\"", "").Replace("[","").Replace("]", "");
            Application.Current.MainPage.DisplayAlert("Error", values, "Ok");
        }
    }
}
