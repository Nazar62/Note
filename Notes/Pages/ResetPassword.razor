@page "/resetPassword"
@inject NavigationManager Navigation;
@inject RefreshViewState RefreshViewState;

<form id="resetForm" @onsubmit="ResetPass">
    <div class="loginContainer">
        <div class="login">
            <label for="password" class="loginLabel">New password</label><br>
            <input @bind="NewPass" type="password" placeholder="Password" name="password" required class="inputLogin" id="password"><br>
            <label for="password2" class="loginLabel">Confirm password</label><br>
            <input @bind="ConfirmPass" type="password" placeholder="Confirm password" name="password2" required class="inputLogin" id="password2"><br>
            <input type="submit" value="Confirm" id="submit" class="submitLogin">
        </div>
        <div class="error" id="error">
            <div class="errorContent">
                <div id="errorText">
                </div>
            </div>
        </div>
    </div>
</form>
<div class="popup" id="popup">
    <div class="popupContainer popupContent">
        <div class="popupInputs popupContent">
            <div class="popupTitle popupContent">
                <input type="text" id="popupTitle" value="title" readonly>
            </div>
            <div class="popupDescription popupContent">
                <textarea id="popupDescription" readonly></textarea>
            </div>
        </div>
    </div>
</div>

@code {
    private string NewPass;
    private string ConfirmPass;
    HttpClient client = new HttpClient();
    static string appDataPath = FileSystem.Current.AppDataDirectory;

    protected override Task OnInitializedAsync()
    {
        RefreshViewState.PropertyChanged += OnPropertyChanged;
        return base.OnInitializedAsync();
    }

    private void OnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(RefreshViewState.IsRefreshing) && RefreshViewState.IsRefreshing)
        {
            // RefreshPage();
            RefreshViewState.SetIsRefreshing(false);
        }
    }

    public static string NormalizeErrorValue(string errorText)
    {
        return errorText.Replace("\"", "").Replace("[", "").Replace("]", "");
    }

    private void ResetPass()
    {
        if (NewPass != ConfirmPass)
        {
            Application.Current.MainPage.DisplayAlert("Error", "New Password not equals Confirm Password", "Ok");
            return;
        }
        else
        {
            var ress = JsonSerializer.Deserialize<ErrorModel>(File.ReadAllText(Path.Combine(appDataPath, "reset.json")));
            var request = new ResetPasswordRequest()
                {
                    token = ress.value.ToString(),
                    NewPassword = NewPass
                };
            var url = "https://nazar624.bsite.net/api/User/reset-password";
            HttpRequestMessage message = new HttpRequestMessage(HttpMethod.Post, url);
            message.Content = JsonContent.Create(request);
            HttpResponseMessage response = client.SendAsync(message).Result;
            if(response.IsSuccessStatusCode)
            {
                Application.Current.MainPage.DisplayAlert("Response", "Reseted successfully", "Ok");
                Navigation.NavigateTo("/login", true);
            } else
            {
                string body = response.Content.ReadAsStringAsync().Result;

                var options = new JsonSerializerOptions()
                    {
                        PropertyNameCaseInsensitive = true
                    };
                var res = JsonSerializer.Deserialize<ErrorModel>(body, options);
                var values = NormalizeErrorValue(res.value.ToString());
                Application.Current.MainPage.DisplayAlert("Error", values, "Ok");
            }
        }
    }
}
